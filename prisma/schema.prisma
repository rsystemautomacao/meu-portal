generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)  // Para administradores gerais
  teams         TeamUser[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  logs          UserLog[]
}

model Team {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  whatsapp        String?     // Número do WhatsApp para contato
  primaryColor    String      @default("#000000")
  secondaryColor  String      @default("#FFFFFF")
  logo            String?
  status          String      @default("ACTIVE") // ACTIVE, PAUSED, BLOCKED
  lastAccess      DateTime?   // Último acesso ao sistema
  users           TeamUser[]
  players         Player[]
  matches         Match[]
  transactions    Transaction[]
  monthlyFees     MonthlyFeeConfig[]
  monthlyFeeExceptions MonthlyFeeException[]
  historicalDebts HistoricalDebt[]
  notifications   Notification[]
  sharedReports  SharedReport[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?   // Soft delete
  logs            UserLog[]
}

model TeamUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  role      String   // "owner" or "member"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

model Player {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  position        String
  number          Int?      // Número da camisa
  photoUrl        String?   // URL da foto do jogador
  birthDate       DateTime?
  joinDate        DateTime? // Removido @default(now()) para permitir data personalizada
  status          String    @default("ACTIVE") // ACTIVE, INACTIVE
  monthlyFee      Float     @default(0)
  isExempt        Boolean   @default(false)
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String    @db.ObjectId
  payments        Payment[]
  monthlyFeeExceptions MonthlyFeeException[]
  historicalDebts HistoricalDebt[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Match {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  opponent       String
  location       String
  ourScore       Int
  opponentScore  Int
  // Novos campos para placares dos quadros
  ourScore1      Int
  opponentScore1 Int
  ourScore2      Int
  opponentScore2 Int
  shareToken     String?   @unique
  team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId         String    @db.ObjectId
  events         MatchEvent[]
  status         String    @default("open") // open, completed, expired
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model MatchEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId   String   @db.ObjectId
  type      String   // "goal", "assist", "yellow_card", "red_card", "fault"
  player    String   // Player name or ID
  minute    Int
  team      String   // "home" ou "away"
  quadro    Int      // 1 ou 2 (mantido para compatibilidade)
  tempo     Int?     // 1 ou 2 (novo campo para tempos de jogo)
  assist    String?  // Nome do jogador da assistência (opcional)
  goleiro   String?  // Nome do goleiro (opcional, para gols sofridos)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  team          Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String      @db.ObjectId
  description   String
  amount        Float
  type          String    // "income" or "expense"
  date          DateTime
  payments      Payment[]  // <- Relação inversa
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model MonthlyFeeConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String   @unique @db.ObjectId
  day       Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthlyFeeException {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String   @db.ObjectId
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String   @db.ObjectId
  month     Int
  year      Int
  isExempt  Boolean
  amount    Float?   // Valor personalizado (opcional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, playerId, month, year])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Payment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  player        Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId      String      @db.ObjectId
  month         Int
  year          Int
  amount        Float
  paid          Boolean     @default(false)
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?     @db.ObjectId
  dueDate       DateTime
  paymentDate   DateTime?
  status        String    // PENDING, PAID, LATE, EXEMPT
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([playerId])
  @@index([status])
  @@index([month, year])
}

model HistoricalDebt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String   @db.ObjectId
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId    String   @db.ObjectId
  amount      Float
  month       Int
  year        Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([playerId])
  @@index([teamId])
  @@unique([playerId, month, year, teamId])
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId      String   @db.ObjectId
  title       String
  message     String
  type        String   // 'payment_reminder', 'payment_overdue', 'access_blocked', 'system'
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model SystemConfig {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  paymentMessage String
  paymentLink    String
  welcomeMessage String
  monthlyValue   Float   @default(0)
}

model SharedReport {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String   @db.ObjectId
  shareToken      String   @unique
  isActive        Boolean  @default(true)
  enabledReports  String[] // Array de relatórios habilitados
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TeamSystemPayment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String   @db.ObjectId
  month     Int
  year      Int
  amount    Float
  status    String   @default("PENDING") // PENDING, PAID, OVERDUE
  dueDate   DateTime
  paidDate  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
  @@index([status])
  @@index([month, year])
}

model DeletedTeamAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  originalTeamId  String   // ID original do time (para referência)
  teamName        String   // Nome do time
  whatsapp        String?  // WhatsApp do time
  primaryColor    String   // Cor primária
  secondaryColor  String   // Cor secundária
  teamCreatedAt   DateTime // Data de criação original do time
  deletedAt       DateTime @default(now()) // Data de exclusão
  deletedBy       String   // 'CLIENT' ou 'ADMIN'
  userEmail       String   // Email do usuário que excluiu
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([deletedAt])
  @@index([deletedBy])
}

model UserLog {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  teamId    String
  action    String   // Ex: "payment_reminder_sent", "access_blocked", "welcome_message_sent", etc.
  type      String   // "automatic" ou "manual"
  details   String?  // Detalhes adicionais do evento
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamId])
  @@index([createdAt])
} 