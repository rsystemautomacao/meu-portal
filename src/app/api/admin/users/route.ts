import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { cookies } from 'next/headers'

export async function GET(request: Request) {
  try {
    // Verificar se √© admin
    const cookieStore = cookies()
    const adminSession = cookieStore.get('adminSession')
    if (!adminSession || adminSession.value !== 'true') {
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const email = searchParams.get('email')

    if (email) {
      // Buscar usu√°rio espec√≠fico por email
      console.log('üîç Buscando usu√°rio por email:', email)
      
      // Verificar se h√° m√∫ltiplos usu√°rios com este email
      const allUsersWithEmail = await prisma.user.findMany({
        where: { email }
      })
      
      console.log(`üìä Usu√°rios encontrados com email ${email}: ${allUsersWithEmail.length}`)
      allUsersWithEmail.forEach((user, index) => {
        console.log(`   ${index + 1}. ID: ${user.id} | Email: ${user.email} | Nome: ${user.name}`)
      })
      
      // Usar o primeiro usu√°rio encontrado (que √© o correto)
      const user = allUsersWithEmail[0]
      
      if (!user) {
        console.log('‚ùå Usu√°rio n√£o encontrado para email:', email)
        return NextResponse.json({ error: 'Usu√°rio n√£o encontrado' }, { status: 404 })
      }

      console.log('‚úÖ Usu√°rio encontrado:', user.id, user.email)
      console.log('üìã Dados completos do usu√°rio:', JSON.stringify(user, null, 2))
      
      return NextResponse.json([user])
    }

    // Buscar todos os usu√°rios
    const users = await prisma.user.findMany()

    // Mapear para o formato esperado
    const mappedUsers = users.map(user => ({
      id: user.id,
      email: user.email,
      name: user.name,
      ownedTeams: [], // Por enquanto vazio
      createdAt: user.createdAt
    }))

    return NextResponse.json(mappedUsers)
  } catch (error) {
    console.error('Erro ao buscar usu√°rios:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
} 